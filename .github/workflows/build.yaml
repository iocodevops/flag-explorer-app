name: CI/CD Pipeline - Flag Explorer

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  backend:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          cache: 'npm'
          cache-dependency-path: 'backend/package-lock.json'
      
      - name: Install backend dependencies
        run: cd backend && npm ci
      
      - name: Run backend linting
        run: cd backend && npm run lint
        
      - name: Run backend tests with coverage
        run: cd backend && npm test -- --coverage
      
      - name: Upload backend test results
        uses: actions/upload-artifact@v3
        with:
          name: backend-test-results
          path: backend/coverage
          
      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v3
        if: always() # Always run even if tests fail
        with:
          report_paths: 'backend/junit.xml'
          
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          projectBaseDir: backend

  frontend:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'
      
      - name: Install frontend dependencies
        run: cd frontend && npm ci
      
      - name: Run frontend linting
        run: cd frontend && npm run lint
        
      - name: Run frontend tests with coverage
        run: cd frontend && npm test -- --coverage
      
      - name: Build frontend
        run: cd frontend && npm run build
        
      - name: Upload frontend test results
        uses: actions/upload-artifact@v3
        with:
          name: frontend-test-results
          path: frontend/coverage
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: frontend/build
          
      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v3
        if: always() # Always run even if tests fail
        with:
          report_paths: 'frontend/junit.xml'
          
      - name: Test Summary
        uses: test-summary/action@v2
        with:
          paths: "frontend/junit.xml"
        if: always()

  security:
    runs-on: ubuntu-latest
    needs: [backend, frontend]
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Run npm audit
        run: |
          cd backend && npm audit --audit-level=high
          cd ../frontend && npm audit --audit-level=high
      
      - name: OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'Flag-Explorer'
          path: '.'
          format: 'HTML'
          out: 'reports'
      
      - name: Upload vulnerability reports
        uses: actions/upload-artifact@v3
        with:
          name: vulnerability-reports
          path: reports/

  # deploy:
  #   needs: [backend, frontend, security]
  #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
  #   runs-on: ubuntu-latest
    
  #   steps:
  #     - uses: actions/checkout@v3
      
  #     - name: Download frontend build
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: frontend-build
  #         path: frontend/build
          
  #     - name: deploy-task

  # notify:
  #   needs: [deploy]
  #   if: always()
  #   runs-on: ubuntu-latest
    
  #   steps:
  #     - name: Send Slack notification
  #       uses: rtCamp/action-slack-notify@v2
  #       env:
  #         SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
  #         SLACK_CHANNEL: deployments
  #         SLACK_COLOR: ${{ job.status }}
  #         SLACK_TITLE: Flag Explorer Deployment
  #         SLACK_MESSAGE: 'Deployment status: ${{ job.status }}'